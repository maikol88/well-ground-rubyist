Nov 15 2017
ORGANIZING OBJECTS WITH CLASSES

Classes lets you group behaviors into convenient bundles to quickly create
many objects that behave essentially the same way.

Classes exist for the purpose of being instantiated. Like in obj = Object.new

- When you override a method, the new version takes precedence.
        class C
          def m
            puts "First definition of method m"
          end
          def m
            puts "Second definition of method m"
          end
        end

        $ C.new.m
        =>Second definition of method m

- it’s possible to reopen a class and make additions or changes. Here’s an example:
    class C
      def x
      end
    end

    class C
      def y
      end
    end

Information and data associated with a particular object embodies
the state of the object.

Ruby objects come with their own storage and retrieval mechanism
for values: instance variables.
- Instance variable names always start with a single @
- Instance variables are only visible to the object to which they belong.
= An instance variable initialized in one method inside a class can be used
 by any method defined within that class.
        class Person
          def set_name(string)
            puts "Setting person's name..."
            @name = string
          end
          def get_name
            puts "Returning the person's name..."
            @name
          end
        end